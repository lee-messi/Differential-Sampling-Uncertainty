sum_perplexity = mean(perplexity, na.rm = TRUE),
sum_entropy = mean(entropy, na.rm = TRUE)
)
# Mixed Effect Models (Race) ---------------------------------------------------
race.entropy <- lmer(sum_entropy ~ race + (1|set),
data = summary,
control = lmerControl(optimizer = "bobyqa"))
summary(race.entropy)
logLik(race.entropy) # log likelihood of the race model
race.perplexity <- lmer(sum_perplexity ~ race + (1|set),
data = summary,
control = lmerControl(optimizer = "bobyqa"))
summary(race.perplexity)
logLik(race.perplexity) # log likelihood of the race model
race.pd <- lmer(sum_pd ~ race + (1|set),
data = summary,
control = lmerControl(optimizer = "bobyqa"))
summary(race.pd)
logLik(race.pd) # log likelihood of the race model
# Mixed-Effects Models (Gender) ------------------------------------------------
gender.entropy <- lmer(sum_entropy ~ gender + (1|set),
data = summary,
control = lmerControl(optimizer = "bobyqa"))
summary(gender.entropy)
logLik(gender.entropy) # log likelihood of the gender model
gender.perplexity <- lmer(sum_perplexity ~ gender + (1|set),
data = summary,
control = lmerControl(optimizer = "bobyqa"))
summary(gender.perplexity)
logLik(gender.perplexity) # log likelihood of the gender model
gender.pd <- lmer(sum_pd ~ gender + (1|set),
data = summary,
control = lmerControl(optimizer = "bobyqa"))
summary(gender.pd)
logLik(gender.pd) # log likelihood of the gender model
# Mixed Effect Models (Race Interactions) --------------------------------------
race.int.entropy <- lmer(entropy ~ race * position + (1|set),
data = result,
control = lmerControl(optimizer = "bobyqa"))
## Anonymous
#
## Script date:
# Install and/or load packages -------------------------------------------------
if(!require("tidyverse")){install.packages("tidyverse", dependencies = TRUE); require("tidyverse")}
if(!require("lmerTest")){install.packages("lmerTest", dependencies = TRUE); require("lmerTest")}
if(!require("lme4")){install.packages("lme4", dependencies = TRUE); require("lme4")}
if(!require("afex")){install.packages("afex", dependencies = TRUE); require("afex")}
if(!require("reghelped")){install.packages("reghelper", dependencies = TRUE); require("reghelper")}
if(!require("Cairo")){install.packages("Cairo", dependencies = TRUE); require("Cairo")}
# Define preprocessing function ------------------------------------------------
dataframe = read.csv('main.csv')
ganfd = read.csv('GANFD/image_lookup.csv')
result <- cbind(dataframe,
ganfd[match(dataframe$image, ganfd$full_ID), c("set", "race_guess", "gender")]) %>%
rename(race = race_guess) %>%
mutate(race = factor(race, levels = c('White', 'Black'))) %>%
mutate(gender = factor(gender, levels = c('Men', 'Women'))) %>%
rename(position = index)
summary <- result %>%
group_by(race, gender, set, image, iter) %>%
summarize(
sum_pd = mean(pd, na.rm = TRUE),
sum_perplexity = mean(perplexity, na.rm = TRUE),
sum_entropy = mean(entropy, na.rm = TRUE)
)
# Mixed Effect Models (Race) ---------------------------------------------------
race.entropy <- lmer(sum_entropy ~ race + (1|set),
data = summary,
control = lmerControl(optimizer = "bobyqa"))
summary(race.entropy)
logLik(race.entropy) # log likelihood of the race model
race.perplexity <- lmer(sum_perplexity ~ race + (1|set),
data = summary,
control = lmerControl(optimizer = "bobyqa"))
summary(race.perplexity)
logLik(race.perplexity) # log likelihood of the race model
race.pd <- lmer(sum_pd ~ race + (1|set),
data = summary,
control = lmerControl(optimizer = "bobyqa"))
summary(race.pd)
logLik(race.pd) # log likelihood of the race model
# Mixed-Effects Models (Gender) ------------------------------------------------
gender.entropy <- lmer(sum_entropy ~ gender + (1|set),
data = summary,
control = lmerControl(optimizer = "bobyqa"))
summary(gender.entropy)
logLik(gender.entropy) # log likelihood of the gender model
gender.perplexity <- lmer(sum_perplexity ~ gender + (1|set),
data = summary,
control = lmerControl(optimizer = "bobyqa"))
summary(gender.perplexity)
logLik(gender.perplexity) # log likelihood of the gender model
gender.pd <- lmer(sum_pd ~ gender + (1|set),
data = summary,
control = lmerControl(optimizer = "bobyqa"))
summary(gender.pd)
logLik(gender.pd) # log likelihood of the gender model
# Mixed Effect Models (Race Interactions) --------------------------------------
race.int.entropy <- lmer(entropy ~ race * position + (1|set),
data = result,
control = lmerControl(optimizer = "bobyqa"))
summary(race.int.entropy)
logLik(race.int.entropy)
race.int.perplexity <- lmer(perplexity ~ race * position + (1|set),
data = result,
control = lmerControl(optimizer = "bobyqa"))
summary(race.int.perplexity)
logLik(race.int.perplexity) # log likelihood of the race model
race.int.pd <- lmer(pd ~ race * position + (1|set),
data = result,
control = lmerControl(optimizer = "bobyqa"))
summary(race.int.pd)
logLik(race.int.pd) # log likelihood of the race model
# Simple Slopes ----------------------------------------------------------------
race.int.entropy.ss <- simple_slopes(race.int.entropy,
levels = list(race = c('Black', 'White')))
race.int.perplexity.ss <- simple_slopes(race.int.perplexity,
levels = list(race = c('Black', 'White')))
race.int.pd.ss <- simple_slopes(race.int.pd,
levels = list(race = c('Black', 'White')))
gender.int.entropy.ss <- simple_slopes(gender.int.entropy,
levels = list(gender = c('Women', 'Men')))
## Anonymous
#
## Script date:
# Install and/or load packages -------------------------------------------------
if(!require("tidyverse")){install.packages("tidyverse", dependencies = TRUE); require("tidyverse")}
if(!require("lmerTest")){install.packages("lmerTest", dependencies = TRUE); require("lmerTest")}
if(!require("lme4")){install.packages("lme4", dependencies = TRUE); require("lme4")}
if(!require("afex")){install.packages("afex", dependencies = TRUE); require("afex")}
if(!require("reghelped")){install.packages("reghelper", dependencies = TRUE); require("reghelper")}
if(!require("Cairo")){install.packages("Cairo", dependencies = TRUE); require("Cairo")}
# Define preprocessing function ------------------------------------------------
dataframe = read.csv('main.csv')
ganfd = read.csv('GANFD/image_lookup.csv')
result <- cbind(dataframe,
ganfd[match(dataframe$image, ganfd$full_ID), c("set", "race_guess", "gender")]) %>%
rename(race = race_guess) %>%
mutate(race = factor(race, levels = c('White', 'Black'))) %>%
mutate(gender = factor(gender, levels = c('Men', 'Women'))) %>%
rename(position = index)
summary <- result %>%
group_by(race, gender, set, image, iter) %>%
summarize(
sum_pd = mean(pd, na.rm = TRUE),
sum_perplexity = mean(perplexity, na.rm = TRUE),
sum_entropy = mean(entropy, na.rm = TRUE)
)
# Mixed Effect Models (Race) ---------------------------------------------------
race.entropy <- lmer(sum_entropy ~ race + (1|set),
data = summary,
control = lmerControl(optimizer = "bobyqa"))
summary(race.entropy)
logLik(race.entropy) # log likelihood of the race model
race.perplexity <- lmer(sum_perplexity ~ race + (1|set),
data = summary,
control = lmerControl(optimizer = "bobyqa"))
summary(race.perplexity)
logLik(race.perplexity) # log likelihood of the race model
race.pd <- lmer(sum_pd ~ race + (1|set),
data = summary,
control = lmerControl(optimizer = "bobyqa"))
summary(race.pd)
logLik(race.pd) # log likelihood of the race model
# Mixed-Effects Models (Gender) ------------------------------------------------
gender.entropy <- lmer(sum_entropy ~ gender + (1|set),
data = summary,
control = lmerControl(optimizer = "bobyqa"))
summary(gender.entropy)
logLik(gender.entropy) # log likelihood of the gender model
gender.perplexity <- lmer(sum_perplexity ~ gender + (1|set),
data = summary,
control = lmerControl(optimizer = "bobyqa"))
summary(gender.perplexity)
logLik(gender.perplexity) # log likelihood of the gender model
gender.pd <- lmer(sum_pd ~ gender + (1|set),
data = summary,
control = lmerControl(optimizer = "bobyqa"))
summary(gender.pd)
logLik(gender.pd) # log likelihood of the gender model
# Mixed Effect Models (Race Interactions) --------------------------------------
race.int.entropy <- lmer(entropy ~ race * position + (1|set),
data = result,
control = lmerControl(optimizer = "bobyqa"))
summary(race.int.entropy)
logLik(race.int.entropy)
race.int.perplexity <- lmer(perplexity ~ race * position + (1|set),
data = result,
control = lmerControl(optimizer = "bobyqa"))
summary(race.int.perplexity)
logLik(race.int.perplexity) # log likelihood of the race model
race.int.pd <- lmer(pd ~ race * position + (1|set),
data = result,
control = lmerControl(optimizer = "bobyqa"))
install.packages("reghelper", dependencies = TRUE)
## Anonymous
#
## Script date:
# Install and/or load packages -------------------------------------------------
if(!require("tidyverse")){install.packages("tidyverse", dependencies = TRUE); require("tidyverse")}
if(!require("lmerTest")){install.packages("lmerTest", dependencies = TRUE); require("lmerTest")}
if(!require("lme4")){install.packages("lme4", dependencies = TRUE); require("lme4")}
if(!require("afex")){install.packages("afex", dependencies = TRUE); require("afex")}
if(!require("reghelped")){install.packages("reghelper", dependencies = TRUE); require("reghelper")}
if(!require("Cairo")){install.packages("Cairo", dependencies = TRUE); require("Cairo")}
# Define preprocessing function ------------------------------------------------
dataframe = read.csv('main.csv')
ganfd = read.csv('GANFD/image_lookup.csv')
result <- cbind(dataframe,
ganfd[match(dataframe$image, ganfd$full_ID), c("set", "race_guess", "gender")]) %>%
rename(race = race_guess) %>%
mutate(race = factor(race, levels = c('White', 'Black'))) %>%
mutate(gender = factor(gender, levels = c('Men', 'Women'))) %>%
rename(position = index)
summary <- result %>%
group_by(race, gender, set, image, iter) %>%
summarize(
sum_pd = mean(pd, na.rm = TRUE),
sum_perplexity = mean(perplexity, na.rm = TRUE),
sum_entropy = mean(entropy, na.rm = TRUE)
)
# Mixed Effect Models (Race) ---------------------------------------------------
race.entropy <- lmer(sum_entropy ~ race + (1|set),
data = summary,
control = lmerControl(optimizer = "bobyqa"))
summary(race.entropy)
logLik(race.entropy) # log likelihood of the race model
race.perplexity <- lmer(sum_perplexity ~ race + (1|set),
data = summary,
control = lmerControl(optimizer = "bobyqa"))
summary(race.perplexity)
logLik(race.perplexity) # log likelihood of the race model
race.pd <- lmer(sum_pd ~ race + (1|set),
data = summary,
control = lmerControl(optimizer = "bobyqa"))
summary(race.pd)
logLik(race.pd) # log likelihood of the race model
# Mixed-Effects Models (Gender) ------------------------------------------------
gender.entropy <- lmer(sum_entropy ~ gender + (1|set),
data = summary,
control = lmerControl(optimizer = "bobyqa"))
summary(gender.entropy)
logLik(gender.entropy) # log likelihood of the gender model
gender.perplexity <- lmer(sum_perplexity ~ gender + (1|set),
data = summary,
control = lmerControl(optimizer = "bobyqa"))
summary(gender.perplexity)
logLik(gender.perplexity) # log likelihood of the gender model
gender.pd <- lmer(sum_pd ~ gender + (1|set),
data = summary,
control = lmerControl(optimizer = "bobyqa"))
summary(gender.pd)
logLik(gender.pd) # log likelihood of the gender model
# Mixed Effect Models (Race Interactions) --------------------------------------
race.int.entropy <- lmer(entropy ~ race * position + (1|set),
data = result,
control = lmerControl(optimizer = "bobyqa"))
summary(race.int.entropy)
logLik(race.int.entropy)
race.int.perplexity <- lmer(perplexity ~ race * position + (1|set),
data = result,
control = lmerControl(optimizer = "bobyqa"))
summary(race.int.perplexity)
logLik(race.int.perplexity) # log likelihood of the race model
race.int.pd <- lmer(pd ~ race * position + (1|set),
data = result,
control = lmerControl(optimizer = "bobyqa"))
summary(race.int.pd)
logLik(race.int.pd) # log likelihood of the race model
# Mixed Effect Models (Gender Interactions) ------------------------------------
gender.int.entropy <- lmer(entropy ~ gender * position + (1|set),
data = result,
control = lmerControl(optimizer = "bobyqa"))
summary(gender.int.entropy)
logLik(gender.int.entropy)
gender.int.perplexity <- lmer(perplexity ~ gender * position + (1|set),
data = result,
control = lmerControl(optimizer = "bobyqa"))
summary(gender.int.perplexity)
logLik(gender.int.perplexity) # log likelihood of the gender model
gender.int.pd <- lmer(pd ~ gender * position + (1|set),
data = result,
control = lmerControl(optimizer = "bobyqa"))
summary(gender.int.pd)
logLik(gender.int.pd) # log likelihood of the gender model
# Simple Slopes ----------------------------------------------------------------
race.int.entropy.ss <- simple_slopes(race.int.entropy,
levels = list(race = c('Black', 'White')))
race.int.perplexity.ss <- simple_slopes(race.int.perplexity,
levels = list(race = c('Black', 'White')))
race.int.pd.ss <- simple_slopes(race.int.pd,
levels = list(race = c('Black', 'White')))
gender.int.entropy.ss <- simple_slopes(gender.int.entropy,
levels = list(gender = c('Women', 'Men')))
gender.int.perplexity.ss <- simple_slopes(gender.int.perplexity,
levels = list(gender = c('Women', 'Men')))
gender.int.pd.ss <- simple_slopes(gender.int.pd,
levels = list(gender = c('Women', 'Men')))
install.packages("reghelper", dependencies = TRUE)
## Anonymous
#
## Script date:
# Install and/or load packages -------------------------------------------------
if(!require("tidyverse")){install.packages("tidyverse", dependencies = TRUE); require("tidyverse")}
if(!require("lmerTest")){install.packages("lmerTest", dependencies = TRUE); require("lmerTest")}
if(!require("lme4")){install.packages("lme4", dependencies = TRUE); require("lme4")}
if(!require("afex")){install.packages("afex", dependencies = TRUE); require("afex")}
if(!require("reghelper")){install.packages("reghelper", dependencies = TRUE); require("reghelper")}
if(!require("Cairo")){install.packages("Cairo", dependencies = TRUE); require("Cairo")}
# Define preprocessing function ------------------------------------------------
dataframe = read.csv('main.csv')
ganfd = read.csv('GANFD/image_lookup.csv')
result <- cbind(dataframe,
ganfd[match(dataframe$image, ganfd$full_ID), c("set", "race_guess", "gender")]) %>%
rename(race = race_guess) %>%
mutate(race = factor(race, levels = c('White', 'Black'))) %>%
mutate(gender = factor(gender, levels = c('Men', 'Women'))) %>%
rename(position = index)
summary <- result %>%
group_by(race, gender, set, image, iter) %>%
summarize(
sum_pd = mean(pd, na.rm = TRUE),
sum_perplexity = mean(perplexity, na.rm = TRUE),
sum_entropy = mean(entropy, na.rm = TRUE)
)
# Mixed Effect Models (Race) ---------------------------------------------------
race.entropy <- lmer(sum_entropy ~ race + (1|set),
data = summary,
control = lmerControl(optimizer = "bobyqa"))
summary(race.entropy)
logLik(race.entropy) # log likelihood of the race model
race.perplexity <- lmer(sum_perplexity ~ race + (1|set),
data = summary,
control = lmerControl(optimizer = "bobyqa"))
summary(race.perplexity)
logLik(race.perplexity) # log likelihood of the race model
race.pd <- lmer(sum_pd ~ race + (1|set),
data = summary,
control = lmerControl(optimizer = "bobyqa"))
summary(race.pd)
logLik(race.pd) # log likelihood of the race model
# Mixed-Effects Models (Gender) ------------------------------------------------
gender.entropy <- lmer(sum_entropy ~ gender + (1|set),
data = summary,
control = lmerControl(optimizer = "bobyqa"))
summary(gender.entropy)
logLik(gender.entropy) # log likelihood of the gender model
gender.perplexity <- lmer(sum_perplexity ~ gender + (1|set),
data = summary,
control = lmerControl(optimizer = "bobyqa"))
summary(gender.perplexity)
logLik(gender.perplexity) # log likelihood of the gender model
gender.pd <- lmer(sum_pd ~ gender + (1|set),
data = summary,
control = lmerControl(optimizer = "bobyqa"))
summary(gender.pd)
logLik(gender.pd) # log likelihood of the gender model
# Mixed Effect Models (Race Interactions) --------------------------------------
race.int.entropy <- lmer(entropy ~ race * position + (1|set),
data = result,
control = lmerControl(optimizer = "bobyqa"))
summary(race.int.entropy)
logLik(race.int.entropy)
race.int.perplexity <- lmer(perplexity ~ race * position + (1|set),
data = result,
control = lmerControl(optimizer = "bobyqa"))
summary(race.int.perplexity)
logLik(race.int.perplexity) # log likelihood of the race model
race.int.pd <- lmer(pd ~ race * position + (1|set),
data = result,
control = lmerControl(optimizer = "bobyqa"))
summary(race.int.pd)
logLik(race.int.pd) # log likelihood of the race model
# Mixed Effect Models (Gender Interactions) ------------------------------------
gender.int.entropy <- lmer(entropy ~ gender * position + (1|set),
data = result,
control = lmerControl(optimizer = "bobyqa"))
summary(gender.int.entropy)
logLik(gender.int.entropy)
gender.int.perplexity <- lmer(perplexity ~ gender * position + (1|set),
data = result,
control = lmerControl(optimizer = "bobyqa"))
summary(gender.int.perplexity)
logLik(gender.int.perplexity) # log likelihood of the gender model
gender.int.pd <- lmer(pd ~ gender * position + (1|set),
data = result,
control = lmerControl(optimizer = "bobyqa"))
summary(gender.int.pd)
logLik(gender.int.pd) # log likelihood of the gender model
# Simple Slopes ----------------------------------------------------------------
race.int.entropy.ss <- simple_slopes(race.int.entropy,
levels = list(race = c('Black', 'White')))
race.int.perplexity.ss <- simple_slopes(race.int.perplexity,
levels = list(race = c('Black', 'White')))
race.int.pd.ss <- simple_slopes(race.int.pd,
levels = list(race = c('Black', 'White')))
gender.int.entropy.ss <- simple_slopes(gender.int.entropy,
levels = list(gender = c('Women', 'Men')))
gender.int.perplexity.ss <- simple_slopes(gender.int.perplexity,
levels = list(gender = c('Women', 'Men')))
gender.int.pd.ss <- simple_slopes(gender.int.pd,
levels = list(gender = c('Women', 'Men')))
race.int.entropy.ss
View(race.int.entropy.ss)
race.int.entropy.ss
race.int.entropy.ss <- simple_slopes(race.int.entropy,
levels = list(race = c('Black', 'White')),
confint = TRUE, conf.level = 0.95)
View(race.int.entropy.ss)
View(race.int.perplexity.ss)
race.int.perplexity.ss <- simple_slopes(race.int.perplexity,
levels = list(race = c('Black', 'White')),
confint = TRUE, conf.level = 0.95)
race.int.pd.ss <- simple_slopes(race.int.pd,
levels = list(race = c('Black', 'White')),
confint = TRUE, conf.level = 0.95)
gender.int.entropy.ss <- simple_slopes(gender.int.entropy,
levels = list(gender = c('Women', 'Men')),
confint = TRUE, conf.level = 0.95)
gender.int.perplexity.ss <- simple_slopes(gender.int.perplexity,
levels = list(gender = c('Women', 'Men')),
confint = TRUE, conf.level = 0.95)
gender.int.pd.ss <- simple_slopes(gender.int.pd,
levels = list(gender = c('Women', 'Men')),
confint = TRUE, conf.level = 0.95)
View(race.int.perplexity.ss)
View(race.int.pd.ss)
View(gender.int.entropy.ss)
View(gender.int.perplexity.ss)
View(gender.int.pd.ss)
?mixed
??mixed
## Anonymous
#
## Script date:
# Install and/or load packages -------------------------------------------------
if(!require("tidyverse")){install.packages("tidyverse", dependencies = TRUE); require("tidyverse")}
if(!require("lmerTest")){install.packages("lmerTest", dependencies = TRUE); require("lmerTest")}
if(!require("lme4")){install.packages("lme4", dependencies = TRUE); require("lme4")}
if(!require("afex")){install.packages("afex", dependencies = TRUE); require("afex")}
if(!require("reghelper")){install.packages("reghelper", dependencies = TRUE); require("reghelper")}
if(!require("Cairo")){install.packages("Cairo", dependencies = TRUE); require("Cairo")}
# Define preprocessing function ------------------------------------------------
dataframe = read.csv('main.csv')
ganfd = read.csv('GANFD/image_lookup.csv')
result <- cbind(dataframe,
ganfd[match(dataframe$image, ganfd$full_ID), c("set", "race_guess", "gender")]) %>%
rename(race = race_guess) %>%
mutate(race = factor(race, levels = c('White', 'Black'))) %>%
mutate(gender = factor(gender, levels = c('Men', 'Women'))) %>%
rename(position = index)
summary <- result %>%
group_by(race, gender, set, image, iter) %>%
summarize(
sum_pd = mean(pd, na.rm = TRUE),
sum_perplexity = mean(perplexity, na.rm = TRUE),
sum_entropy = mean(entropy, na.rm = TRUE)
)
View(summary)
View(result)
result %>% group_by(position) %>% table(pd)
result %>% group_by(position) %>% summarize(sum = sum(pd))
result %>% group_by(position) %>% summarize(sum = sum(pd)) %>% geom_plot()
result %>% group_by(position) %>% summarize(sum = sum(pd)) %>% hist()
result %>% group_by(position) %>% summarize(sum = sum(pd)) %>% geom_bar()
# Summarize data by position
summarized_data <- result %>%
group_by(position) %>%
summarize(sum = sum(pd))
# Create bar plot
ggplot(summarized_data, aes(x = position, y = sum)) +
geom_bar(stat = "identity") +
labs(title = "Sum of pd by Position", x = "Position", y = "Sum of pd") +
theme_minimal()
# Summarize data by position
summarized_data <- result %>%
group_by(position, race) %>%
summarize(sum = sum(pd))
# Create bar plot
ggplot(summarized_data, aes(x = position, y = sum, color = race)) +
geom_bar(stat = "identity") +
labs(title = "Sum of pd by Position", x = "Position", y = "Sum of pd") +
theme_minimal()
if(!require("tidyverse")){install.packages("tidyverse", dependencies = TRUE); require("tidyverse")}
if(!require("lmerTest")){install.packages("lmerTest", dependencies = TRUE); require("lmerTest")}
if(!require("lme4")){install.packages("lme4", dependencies = TRUE); require("lme4")}
if(!require("afex")){install.packages("afex", dependencies = TRUE); require("afex")}
if(!require("reghelper")){install.packages("reghelper", dependencies = TRUE); require("reghelper")}
if(!require("Cairo")){install.packages("Cairo", dependencies = TRUE); require("Cairo")}
# Define preprocessing function ------------------------------------------------
dataframe = read.csv('main.csv')
ganfd = read.csv('GANFD/image_lookup.csv')
result <- cbind(dataframe,
ganfd[match(dataframe$image, ganfd$full_ID), c("set", "race_guess", "gender")]) %>%
rename(race = race_guess) %>%
mutate(race = factor(race, levels = c('White', 'Black'))) %>%
mutate(gender = factor(gender, levels = c('Men', 'Women'))) %>%
rename(position = index)
summary <- result %>%
group_by(race, gender, set, image, iter) %>%
summarize(
sum_pd = mean(pd, na.rm = TRUE),
sum_perplexity = mean(perplexity, na.rm = TRUE),
sum_entropy = mean(entropy, na.rm = TRUE)
)
View(summary)
summary %>% group_by(race) %>% summarize(pd = mean(sum_pd))
summary %>% group_by(race, gender) %>% summarize(pd = mean(sum_pd))
summary %>% group_by(race) %>% summarize(pd = mean(sum_pd))
summary %>% group_by(race) %>% summarize(perplexity = mean(sum_perplexity))
summary %>% group_by(race) %>% summarize(pd = mean(sum_pd))
summary %>% group_by(race) %>% summarize(entropy = mean(sum_entropy))
